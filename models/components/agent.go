// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// State - The state of the agent
type State string

const (
	StatePending State = "pending"
	StateActive  State = "active"
	StateStopped State = "stopped"
	StateError   State = "error"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "stopped":
		fallthrough
	case "error":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type Agent struct {
	// The id of the agent
	ID int64 `json:"id"`
	// The hostname of the agent
	HostName string `json:"host_name"`
	// The signature of the client
	ClientSignature string `json:"client_signature"`
	// The state of the agent
	State State `json:"state"`
	// The operating system of the agent
	OperatingSystem       string                     `json:"operating_system"`
	Devices               []string                   `json:"devices"`
	AdvancedConfiguration AdvancedAgentConfiguration `json:"advanced_configuration"`
}

func (o *Agent) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Agent) GetHostName() string {
	if o == nil {
		return ""
	}
	return o.HostName
}

func (o *Agent) GetClientSignature() string {
	if o == nil {
		return ""
	}
	return o.ClientSignature
}

func (o *Agent) GetState() State {
	if o == nil {
		return State("")
	}
	return o.State
}

func (o *Agent) GetOperatingSystem() string {
	if o == nil {
		return ""
	}
	return o.OperatingSystem
}

func (o *Agent) GetDevices() []string {
	if o == nil {
		return []string{}
	}
	return o.Devices
}

func (o *Agent) GetAdvancedConfiguration() AdvancedAgentConfiguration {
	if o == nil {
		return AdvancedAgentConfiguration{}
	}
	return o.AdvancedConfiguration
}

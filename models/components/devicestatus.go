// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type TheTypeOfTheDevice string

const (
	TheTypeOfTheDeviceCPU TheTypeOfTheDevice = "CPU"
	TheTypeOfTheDeviceGpu TheTypeOfTheDevice = "GPU"
)

func (e TheTypeOfTheDevice) ToPointer() *TheTypeOfTheDevice {
	return &e
}
func (e *TheTypeOfTheDevice) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CPU":
		fallthrough
	case "GPU":
		*e = TheTypeOfTheDevice(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TheTypeOfTheDevice: %v", v)
	}
}

type DeviceStatus struct {
	DeviceID    int64              `json:"device_id"`
	DeviceName  string             `json:"device_name"`
	DeviceType  TheTypeOfTheDevice `json:"device_type"`
	Speed       int64              `json:"speed"`
	Utilization int64              `json:"utilization"`
	Temperature int64              `json:"temperature"`
}

func (o *DeviceStatus) GetDeviceID() int64 {
	if o == nil {
		return 0
	}
	return o.DeviceID
}

func (o *DeviceStatus) GetDeviceName() string {
	if o == nil {
		return ""
	}
	return o.DeviceName
}

func (o *DeviceStatus) GetDeviceType() TheTypeOfTheDevice {
	if o == nil {
		return TheTypeOfTheDevice("")
	}
	return o.DeviceType
}

func (o *DeviceStatus) GetSpeed() int64 {
	if o == nil {
		return 0
	}
	return o.Speed
}

func (o *DeviceStatus) GetUtilization() int64 {
	if o == nil {
		return 0
	}
	return o.Utilization
}

func (o *DeviceStatus) GetTemperature() int64 {
	if o == nil {
		return 0
	}
	return o.Temperature
}

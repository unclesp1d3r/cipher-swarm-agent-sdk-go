// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/unclesp1d3r/cipherswarm-agent-sdk-go/internal/utils"
	"time"
)

// Metadata - Additional metadata about the error
type Metadata struct {
	// The date of the error
	ErrorDate time.Time `json:"error_date"`
	// Other metadata
	Other map[string]any `json:"other,omitempty"`
}

func (m Metadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *Metadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Metadata) GetErrorDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ErrorDate
}

func (o *Metadata) GetOther() map[string]any {
	if o == nil {
		return nil
	}
	return o.Other
}

// Severity - The severity of the error:
//   - `info` - Informational message, no action required.
//   - `warning` - Non-critical error, no action required. Anticipated, but not necessarily problematic.
//   - `minor` - Minor error, no action required. Should be investigated, but the task can continue.
//   - `major` - Major error, action required. The task should be investigated and possibly restarted.
//   - `critical` - Critical error, action required. The task should be stopped and investigated.
//   - `fatal` - Fatal error, action required. The agent cannot continue with the task and should not be reattempted.
type Severity string

const (
	SeverityInfo     Severity = "info"
	SeverityWarning  Severity = "warning"
	SeverityMinor    Severity = "minor"
	SeverityMajor    Severity = "major"
	SeverityCritical Severity = "critical"
	SeverityFatal    Severity = "fatal"
)

func (e Severity) ToPointer() *Severity {
	return &e
}
func (e *Severity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "warning":
		fallthrough
	case "minor":
		fallthrough
	case "major":
		fallthrough
	case "critical":
		fallthrough
	case "fatal":
		*e = Severity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Severity: %v", v)
	}
}

type AgentError struct {
	// The error message
	Message string `json:"message"`
	// Additional metadata about the error
	Metadata *Metadata `json:"metadata,omitempty"`
	// The severity of the error:
	//                        * `info` - Informational message, no action required.
	//                        * `warning` - Non-critical error, no action required. Anticipated, but not necessarily problematic.
	//                        * `minor` - Minor error, no action required. Should be investigated, but the task can continue.
	//                        * `major` - Major error, action required. The task should be investigated and possibly restarted.
	//                        * `critical` - Critical error, action required. The task should be stopped and investigated.
	//                         * `fatal` - Fatal error, action required. The agent cannot continue with the task and should not be reattempted.
	Severity Severity `json:"severity"`
	// The agent that caused the error
	AgentID int64 `json:"agent_id"`
	// The task that caused the error, if any
	TaskID *int64 `json:"task_id,omitempty"`
}

func (o *AgentError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *AgentError) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AgentError) GetSeverity() Severity {
	if o == nil {
		return Severity("")
	}
	return o.Severity
}

func (o *AgentError) GetAgentID() int64 {
	if o == nil {
		return 0
	}
	return o.AgentID
}

func (o *AgentError) GetTaskID() *int64 {
	if o == nil {
		return nil
	}
	return o.TaskID
}

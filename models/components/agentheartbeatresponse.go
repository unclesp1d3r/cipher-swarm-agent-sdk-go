// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AgentHeartbeatResponseState - The state of the agent:
//   - `pending` - The agent needs to perform the setup process again.
//   - `active` - The agent is ready to accept tasks, all is good.
//   - `stopped` - The agent has been stopped by the user.
type AgentHeartbeatResponseState string

const (
	AgentHeartbeatResponseStatePending AgentHeartbeatResponseState = "pending"
	AgentHeartbeatResponseStateStopped AgentHeartbeatResponseState = "stopped"
	AgentHeartbeatResponseStateError   AgentHeartbeatResponseState = "error"
)

func (e AgentHeartbeatResponseState) ToPointer() *AgentHeartbeatResponseState {
	return &e
}
func (e *AgentHeartbeatResponseState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "stopped":
		fallthrough
	case "error":
		*e = AgentHeartbeatResponseState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AgentHeartbeatResponseState: %v", v)
	}
}

// AgentHeartbeatResponse - The response to an agent heartbeat
type AgentHeartbeatResponse struct {
	// The state of the agent:
	//                        * `pending` - The agent needs to perform the setup process again.
	//                        * `active` - The agent is ready to accept tasks, all is good.
	//                        * `stopped` - The agent has been stopped by the user.
	State AgentHeartbeatResponseState `json:"state"`
}

func (o *AgentHeartbeatResponse) GetState() AgentHeartbeatResponseState {
	if o == nil {
		return AgentHeartbeatResponseState("")
	}
	return o.State
}

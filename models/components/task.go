// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"github.com/unclesp1d3r/cipherswarm-agent-sdk/internal/utils"
	"time"
)

type Task struct {
	ID        int64     `json:"id"`
	AttackID  int64     `json:"attack_id"`
	StartDate time.Time `json:"start_date"`
	Status    string    `json:"status"`
	Skip      *int64    `json:"skip,omitempty"`
	Limit     *int64    `json:"limit,omitempty"`
}

func (t Task) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Task) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Task) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Task) GetAttackID() int64 {
	if o == nil {
		return 0
	}
	return o.AttackID
}

func (o *Task) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *Task) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Task) GetSkip() *int64 {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *Task) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

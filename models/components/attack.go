// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/unclesp1d3r/cipherswarm-agent-sdk-go/internal/utils"
)

// AttackMode - Attack mode name
type AttackMode string

const (
	AttackModeDictionary       AttackMode = "dictionary"
	AttackModeCombinator       AttackMode = "combinator"
	AttackModeMask             AttackMode = "mask"
	AttackModeHybridDictionary AttackMode = "hybrid_dictionary"
	AttackModeHybridMask       AttackMode = "hybrid_mask"
)

func (e AttackMode) ToPointer() *AttackMode {
	return &e
}
func (e *AttackMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dictionary":
		fallthrough
	case "combinator":
		fallthrough
	case "mask":
		fallthrough
	case "hybrid_dictionary":
		fallthrough
	case "hybrid_mask":
		*e = AttackMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AttackMode: %v", v)
	}
}

type Attack struct {
	// The id of the attack
	ID int64 `json:"id"`
	// Attack mode name
	AttackMode *AttackMode `default:"dictionary" json:"attack_mode"`
	// hashcat attack mode
	AttackModeHashcat *int64 `default:"0" json:"attack_mode_hashcat"`
	// A hashcat mask string
	Mask *string `default:"" json:"mask"`
	// Enable hashcat increment mode
	IncrementMode *bool `default:"false" json:"increment_mode"`
	// The start of the increment range
	IncrementMinimum int64 `json:"increment_minimum"`
	// The end of the increment range
	IncrementMaximum int64 `json:"increment_maximum"`
	// Enable hashcat optimized mode
	Optimized *bool `default:"false" json:"optimized"`
	// Enable hashcat slow candidate generators
	SlowCandidateGenerators *bool `default:"false" json:"slow_candidate_generators"`
	// The hashcat workload profile
	WorkloadProfile *int64 `default:"3" json:"workload_profile"`
	// Disable hashcat markov mode
	DisableMarkov *bool `default:"false" json:"disable_markov"`
	// Enable hashcat classic markov mode
	ClassicMarkov *bool `default:"false" json:"classic_markov"`
	// The hashcat markov threshold
	MarkovThreshold *int64 `default:"0" json:"markov_threshold"`
	// The left-hand rule for combinator attacks
	LeftRule *string `default:"" json:"left_rule"`
	// The right-hand rule for combinator attacks
	RightRule *string `default:"" json:"right_rule"`
	// Custom charset 1 for hashcat mask attacks
	CustomCharset1 *string `default:"" json:"custom_charset_1"`
	// Custom charset 2 for hashcat mask attacks
	CustomCharset2 *string `default:"" json:"custom_charset_2"`
	// Custom charset 3 for hashcat mask attacks
	CustomCharset3 *string `default:"" json:"custom_charset_3"`
	// Custom charset 4 for hashcat mask attacks
	CustomCharset4 *string `default:"" json:"custom_charset_4"`
	// The id of the hash list
	HashListID int64 `json:"hash_list_id"`
	// The word lists to use in the attack
	WordLists []AttackResourceFile `json:"word_lists,omitempty"`
	// The rule lists to use in the attack
	RuleLists []AttackResourceFile `json:"rule_lists,omitempty"`
	// The mask lists to use in the attack
	MaskLists []AttackResourceFile `json:"mask_lists,omitempty"`
	// The hashcat hash mode
	HashMode *int64 `default:"0" json:"hash_mode"`
	// The download URL for the hash list
	HashListURL string `json:"hash_list_url"`
	// The MD5 checksum of the hash list
	HashListChecksum string `json:"hash_list_checksum"`
	// The URL to the attack
	URL string `json:"url"`
}

func (a Attack) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Attack) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Attack) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Attack) GetAttackMode() *AttackMode {
	if o == nil {
		return nil
	}
	return o.AttackMode
}

func (o *Attack) GetAttackModeHashcat() *int64 {
	if o == nil {
		return nil
	}
	return o.AttackModeHashcat
}

func (o *Attack) GetMask() *string {
	if o == nil {
		return nil
	}
	return o.Mask
}

func (o *Attack) GetIncrementMode() *bool {
	if o == nil {
		return nil
	}
	return o.IncrementMode
}

func (o *Attack) GetIncrementMinimum() int64 {
	if o == nil {
		return 0
	}
	return o.IncrementMinimum
}

func (o *Attack) GetIncrementMaximum() int64 {
	if o == nil {
		return 0
	}
	return o.IncrementMaximum
}

func (o *Attack) GetOptimized() *bool {
	if o == nil {
		return nil
	}
	return o.Optimized
}

func (o *Attack) GetSlowCandidateGenerators() *bool {
	if o == nil {
		return nil
	}
	return o.SlowCandidateGenerators
}

func (o *Attack) GetWorkloadProfile() *int64 {
	if o == nil {
		return nil
	}
	return o.WorkloadProfile
}

func (o *Attack) GetDisableMarkov() *bool {
	if o == nil {
		return nil
	}
	return o.DisableMarkov
}

func (o *Attack) GetClassicMarkov() *bool {
	if o == nil {
		return nil
	}
	return o.ClassicMarkov
}

func (o *Attack) GetMarkovThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.MarkovThreshold
}

func (o *Attack) GetLeftRule() *string {
	if o == nil {
		return nil
	}
	return o.LeftRule
}

func (o *Attack) GetRightRule() *string {
	if o == nil {
		return nil
	}
	return o.RightRule
}

func (o *Attack) GetCustomCharset1() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset1
}

func (o *Attack) GetCustomCharset2() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset2
}

func (o *Attack) GetCustomCharset3() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset3
}

func (o *Attack) GetCustomCharset4() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset4
}

func (o *Attack) GetHashListID() int64 {
	if o == nil {
		return 0
	}
	return o.HashListID
}

func (o *Attack) GetWordLists() []AttackResourceFile {
	if o == nil {
		return nil
	}
	return o.WordLists
}

func (o *Attack) GetRuleLists() []AttackResourceFile {
	if o == nil {
		return nil
	}
	return o.RuleLists
}

func (o *Attack) GetMaskLists() []AttackResourceFile {
	if o == nil {
		return nil
	}
	return o.MaskLists
}

func (o *Attack) GetHashMode() *int64 {
	if o == nil {
		return nil
	}
	return o.HashMode
}

func (o *Attack) GetHashListURL() string {
	if o == nil {
		return ""
	}
	return o.HashListURL
}

func (o *Attack) GetHashListChecksum() string {
	if o == nil {
		return ""
	}
	return o.HashListChecksum
}

func (o *Attack) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

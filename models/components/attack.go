// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"github.com/unclesp1d3r/cipherswarm-agent-sdk/internal/utils"
)

type Attack struct {
	ID                      int64                `json:"id"`
	AttackMode              *string              `default:"dictionary" json:"attack_mode"`
	Mask                    *string              `default:"" json:"mask"`
	IncrementMode           *bool                `default:"false" json:"increment_mode"`
	IncrementMinimum        *int64               `json:"increment_minimum,omitempty"`
	IncrementMaximum        *int64               `json:"increment_maximum,omitempty"`
	Optimized               *bool                `default:"false" json:"optimized"`
	SlowCandidateGenerators *bool                `default:"false" json:"slow_candidate_generators"`
	WorkloadProfile         *int64               `default:"3" json:"workload_profile"`
	DisableMarkov           *bool                `default:"false" json:"disable_markov"`
	ClassicMarkov           *bool                `default:"false" json:"classic_markov"`
	MarkovThreshold         *int64               `default:"0" json:"markov_threshold"`
	LeftRule                *string              `default:"" json:"left_rule"`
	RightRule               *string              `default:"" json:"right_rule"`
	CustomCharset1          *string              `default:"" json:"custom_charset_1"`
	CustomCharset2          *string              `default:"" json:"custom_charset_2"`
	CustomCharset3          *string              `default:"" json:"custom_charset_3"`
	CustomCharset4          *string              `default:"" json:"custom_charset_4"`
	HashListID              int64                `json:"hash_list_id"`
	WordLists               []AttackResourceFile `json:"word_lists,omitempty"`
	RuleLists               []AttackResourceFile `json:"rule_lists,omitempty"`
	HashMode                *int64               `default:"0" json:"hash_mode"`
	HashListURL             *string              `json:"hash_list_url,omitempty"`
	HashListChecksum        *string              `json:"hash_list_checksum,omitempty"`
	URL                     string               `json:"url"`
}

func (a Attack) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Attack) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Attack) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Attack) GetAttackMode() *string {
	if o == nil {
		return nil
	}
	return o.AttackMode
}

func (o *Attack) GetMask() *string {
	if o == nil {
		return nil
	}
	return o.Mask
}

func (o *Attack) GetIncrementMode() *bool {
	if o == nil {
		return nil
	}
	return o.IncrementMode
}

func (o *Attack) GetIncrementMinimum() *int64 {
	if o == nil {
		return nil
	}
	return o.IncrementMinimum
}

func (o *Attack) GetIncrementMaximum() *int64 {
	if o == nil {
		return nil
	}
	return o.IncrementMaximum
}

func (o *Attack) GetOptimized() *bool {
	if o == nil {
		return nil
	}
	return o.Optimized
}

func (o *Attack) GetSlowCandidateGenerators() *bool {
	if o == nil {
		return nil
	}
	return o.SlowCandidateGenerators
}

func (o *Attack) GetWorkloadProfile() *int64 {
	if o == nil {
		return nil
	}
	return o.WorkloadProfile
}

func (o *Attack) GetDisableMarkov() *bool {
	if o == nil {
		return nil
	}
	return o.DisableMarkov
}

func (o *Attack) GetClassicMarkov() *bool {
	if o == nil {
		return nil
	}
	return o.ClassicMarkov
}

func (o *Attack) GetMarkovThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.MarkovThreshold
}

func (o *Attack) GetLeftRule() *string {
	if o == nil {
		return nil
	}
	return o.LeftRule
}

func (o *Attack) GetRightRule() *string {
	if o == nil {
		return nil
	}
	return o.RightRule
}

func (o *Attack) GetCustomCharset1() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset1
}

func (o *Attack) GetCustomCharset2() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset2
}

func (o *Attack) GetCustomCharset3() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset3
}

func (o *Attack) GetCustomCharset4() *string {
	if o == nil {
		return nil
	}
	return o.CustomCharset4
}

func (o *Attack) GetHashListID() int64 {
	if o == nil {
		return 0
	}
	return o.HashListID
}

func (o *Attack) GetWordLists() []AttackResourceFile {
	if o == nil {
		return nil
	}
	return o.WordLists
}

func (o *Attack) GetRuleLists() []AttackResourceFile {
	if o == nil {
		return nil
	}
	return o.RuleLists
}

func (o *Attack) GetHashMode() *int64 {
	if o == nil {
		return nil
	}
	return o.HashMode
}

func (o *Attack) GetHashListURL() *string {
	if o == nil {
		return nil
	}
	return o.HashListURL
}

func (o *Attack) GetHashListChecksum() *string {
	if o == nil {
		return nil
	}
	return o.HashListChecksum
}

func (o *Attack) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}
